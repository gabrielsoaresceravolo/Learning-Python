# -*- coding: utf-8 -*-
"""python-orientacao-objetos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d0mZeq2FQ8B05cUwPhd2hgX_OQ4dGUXw

# **Python - Orientação à Objetos**

**Definição de Classes: Atributos e Construtor**
"""

class Carro:

  #Construtor e atributos
  def __init__(self, modelo, cor, placa, numeroPortas):
    self.modelo = modelo
    self.cor = cor
    self.placa = placa
    self.numeroPortas = numeroPortas

"""**Definição de Classes: Métodos**"""

class Carro:

  #Construtor e atributos
  def __init__(self, modelo, cor, placa, numeroPortas):
    self.modelo = modelo
    self.cor = cor
    self.placa = placa
    self.numeroPortas = numeroPortas

  #Métodos
  def ligar(self):
    print("O carro " + self.modelo + " ligado!")

  def acelerar(self):
    print("O carro " + self.modelo + " está acelerando!")

  def frear(self):
    print("O carro " + self.modelo + " está freando...")

  def acionarSeta(self, orientacao):
    if(orientacao == "esquerda"):
      print(self.modelo + ", seta para esquerda acionada...")
    elif(orientacao == "direita"):
      print(self.modelo + ", seta para direita acionada...")
    else:
      print("Prudentino...")

"""**Instânciando Objetos**"""

#No exemplo abaixo dois carros foram instânciados
carro1 = Carro("Classic", "Cinza", "CPF-7521", 4)
carro2 = Carro("Civic", "Grafite", "FDS_1212", 4)

#Utilizando os objetos
carro1.ligar()
carro1.acelerar()
carro1.frear()
carro1.acionarSeta("esquerda")

"""**Encapsulamento e Modificadores de Acesso**

Python permite encapsulamento e possui modificadores de acesso: publico, privado, protected. Entretanto nenhum atributo é realmente privado em Python. Neste caso, é comum utilizar protected indicado por _ *underscore*.
"""

class Carro:

  #Construtor e atributos
  def __init__(self, modelo, cor, placa, numeroPortas):
    #Atributos marcados com _ indica protected...
    self._modelo = modelo
    self._cor = cor
    self._placa = placa
    self._numeroPortas = numeroPortas

  #Getters e Setters
  def get_modelo(self):
    return self._modelo

  def set_modelo(self, modelo):
    self._modelo = modelo

  def get_cor(self):
    return self._cor

  def set_cor(self, cor):
    self._cor = cor

  def get_placa(self):
    return self._placa

  def set_placa(self, placa):
    self._placa = placa

  def get_numeroPortas(self):
    return self._numeroPortas

  def set_numeroPortas(self, numeroPortas):
    self._numeroPortas = numeroPortas

  #Métodos
  def ligar(self):
    print("O carro " + self._modelo + " ligado!")

  def acelerar(self):
    print("O carro " + self._modelo + " está acelerando!")

  def frear(self):
    print("O carro " + self._modelo + " está freando...")

  def acionarSeta(self, orientacao):
    if(orientacao == "esquerda"):
      print(self._modelo + ", seta para esquerda acionada...")
    elif(orientacao == "direita"):
      print(self._modelo + ", seta para direita acionada...")
    else:
      print("Prudentino...")

#No exemplo abaixo dois carros foram instânciados
carro1 = Carro("Classic", "Cinza", "CPF-7521", 4)
carro2 = Carro("Civic", "Grafite", "FDS_1212", 4)

#Utilizando os objetos
carro1.ligar()
carro1.acelerar()
carro1.frear()
carro1.acionarSeta("esquerda")

#settando de forma incorreta
#carro1.cor = "Amerelo"

#Settando valores e obtendo valores
carro1.set_cor("Amarelo")
print("Nova cor: " + carro1.get_cor())

"""**Herança e Polimorfismo**

"""

#Classe Mãe - SuperClasse
class Pessoa:

  #Construtor
  def __init__(self, nome, endereco):
    self._nome = nome
    self._endereco = endereco

  #Getters e Setters
  def get_nome(self):
    return self._nome

  def set_nome(self, nome):
    self._nome = nome

  def get_endereco(self):
    return self._endereco

  def set_endereco(self, endereco):
    self._endereco = endereco

  #Métodos
  def imprimir(self):
    return("Nome: " + self._nome + " Endereço: " + self._endereco)

#Classe Filha - SubClasse
class PessoaFisica(Pessoa):

  #Construtor
  def __init__(self, nome, endereco, cpf):
    #Polimorfismo para acessar por meio do super o construtor da classe mãe (superclasse)
    super().__init__(nome, endereco)
    self._cpf

  #Getters e Setters
  def get_cpf(self):
    return self._cpf

  def set_cpf(self, cpf):
    self._cpf = cpf

  #Métodos
  def imprimir(self):
    return(super().imprimir() + " CPF: " + self._cpf)

#Classe Filha - SubClasse
class PessoaJuridica(Pessoa):

  #Construtor
  def __init__(self, nome, endereco, cnpj):
    #Polimorfismo para acessar por meio do super o construtor da classe mãe (superclasse)
    super().__init__(nome, endereco)
    self._cnpj

  #Getters e Setters
  def get_cpf(self):
    return self._cnpj

  def set_cpf(self, cnpj):
    self._cnpj = cnpj

  #Métodos
  def imprimir(self):
    return(super().imprimir() + " CNPJ: " + self._cnpj)