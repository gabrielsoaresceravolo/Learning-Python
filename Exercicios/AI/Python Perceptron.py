# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eiK6qnPp3JglzF9HDryZ1SXbPPlkfnhq
"""

import numpy as np

class Perceptron:

  def __init__(self):
    pass

  #Usado após criar a rede para treinar
  #modelo de IA -> Aprendizado
  def treinamento(self, entradas, saidas, taxaAprendizado, epocas):
    self.entradas = entradas
    self.saidas = saidas
    self.taxaAprendizado = taxaAprendizado
    self.epocas = epocas

    #Pesos e bias gerados aletóriamente
    #na primeira etapa do treinamento
    w1 = np.random.uniform(-1,1)
    w2 = np.random.uniform(-1,1)
    bias = np.ramdom.uniform(-1,1)

    for i in range(self.epocas):
      for j in range(len(self.entradas)):
        #Aplicar uma função de ativação: SIGMOID
        sigmoid = (1 / (1 + np.exp((self.entradas[j][0] * w1)+(self.entradas[j][1] * w2) + bias)))

        #Atualizando os pesos após cada iteração
        w1 = w1 + (self.taxaAprendizado * (self.saidas[j][0] - sigmoid) * self.entrada[j][0])
        w2 = w2 + (self.taxaAprendizado * (self.saidas[j][0] - sigmoid) * self.entrada[j][1])
        bias = bias + (self.taxaAprendizado * (self.saidas - sigmoid))

    return w1, w2, bias

  #Após treinar ela é usada para predizer
  #a classe de uma Entrada qualquer
  def predicao():

import numpy as np
#Exemplo np.exp
#exp(x) = e^x onde e= 2,718281(aprox)

ar=np.array([1,2,3])
ar=np.exp(ar)
ar